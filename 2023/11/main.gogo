package main

import (
	_ "embed"
	"fmt"
	"slices"
	"strconv"
	"strings"
)

//go:embed input.txt
var input string
var galaxy []string
var ExpandedGalaxy []string
var GalaxyPositions []string
var Total int

func main() {

	linesInput := strings.Split(strings.TrimSpace(input), "\n")
	for _, line := range linesInput {
		if !strings.Contains(line, "#") {
			galaxy = append(galaxy, line)
		}
		galaxy = append(galaxy, line)
	}

	/*
		for _, line := range galaxy {
			fmt.Println(line)
		}
	*/
	placesToInsertASolumn := []int{}
	for i := 0; i < len(galaxy[0]); i++ {
		column := make([]string, 0)
		for _, line := range galaxy {
			column = append(column, string(line[i]))
		}
		if !slices.Contains(column, "#") {
			placesToInsertASolumn = append(placesToInsertASolumn, i)
		}
	}

	for _, line := range galaxy {
		newLine := ""
		for i, character := range line {
			if slices.Contains(placesToInsertASolumn, i) {
				newLine = newLine + string(character)
			}
			newLine = newLine + string(character)
		}
		ExpandedGalaxy = append(ExpandedGalaxy, newLine)
	}
	for iline, line := range ExpandedGalaxy {
		for icharacter, character := range line {
			if string(character) == "#" {
				Position := strconv.Itoa(iline) + "," + strconv.Itoa(icharacter)

				GalaxyPositions = append(GalaxyPositions, Position)
			}
		}
	}
	//fmt.Println(GalaxyPositions)
	for i := 0; i <= len(GalaxyPositions); i++ {
		for j := i + 1; j <= len(GalaxyPositions)-1; j++ {
			fmt.Println(GalaxyPositions[i], GalaxyPositions[j])
			GalaxyA := strings.Split(GalaxyPositions[i], ",")
			GalaxyB := strings.Split(GalaxyPositions[j], ",")

			GalaxyAX, _ := strconv.Atoi(GalaxyA[0])
			GalaxyAY, _ := strconv.Atoi(GalaxyA[1])

			GalaxyBX, _ := strconv.Atoi(GalaxyB[0])
			GalaxyBY, _ := strconv.Atoi(GalaxyB[1])

			GalaxyXSum := Abs(GalaxyAX - GalaxyBX)
			GalaxyYSum := Abs(GalaxyAY - GalaxyBY)

			fmt.Println(Abs(GalaxyXSum + GalaxyYSum))
			Total += GalaxyXSum + GalaxyYSum
		}

	}
	fmt.Println(Total)
}

func Abs(x int) int {
	if x < 0 {
		return -x
	}
	return x
}
